plugins {
    id 'java'
    id 'findbugs'
    id 'pmd'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

group 'org.iotlabs'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    // eclipse paho repo
    maven {
        url "https://repo.eclipse.org/content/repositories/paho-snapshots/"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.mockito:mockito-all:1.10.19'

    // common libs
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.apache.logging.log4j:log4j-core:2.6.2'
<<<<<<< HEAD
    compile 'org.apache.commons:commons-pool2:2.2'
=======
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.2'
>>>>>>> 31cfe0c4acbae9b09ea10eb15fa49846a08b9f36

    // mqtt
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    compile 'io.moquette:moquette-broker:0.8.1'

    // database support libs
    compile 'com.google.code.gson:gson:2.7'
    compile 'org.mybatis:mybatis:3.4.0'

    // spark web frameworks
    compile 'com.sparkjava:spark-core:2.5'
<<<<<<< HEAD

    // front page
    compile 'com.sparkjava:spark-template-thymeleaf:2.3'

    testCompile 'junit:junit:4.11'
=======
    compile 'com.sparkjava:spark-template-mustache:2.3'
>>>>>>> 31cfe0c4acbae9b09ea10eb15fa49846a08b9f36
}

// static code analyze with findbugs
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    exclude '**/com/pi4j/*'
    classes = classes.filter {
        !it.path.contains(new File("com/pi4j/").path)
    }

    ignoreFailures = true
}

// static code analyze with pmd
tasks.withType(Pmd) {
    reports {
        html.destination = file("${pmd.reportsDir}/pmd-report.html")
        html.enabled = true
        xml.destination = file("${pmd.reportsDir}/pmd-report.xml")
        xml.enabled = true
    }
    source = fileTree('src/main/java/org/')
    ignoreFailures = true
}

// jacoco for codecoverage
jacoco {
    toolVersion = "0.7.6.201602180812"
}
jacocoTestReport  {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml{
            enabled true
            destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
        html{
            enabled true
            destination "${buildDir}/reports/jacoco/html/"
        }
        csv.enabled false
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'com/pi4j/**')
            })
        }
    }
}

/**
 * continuous integration task
 */
task ci(dependsOn: ['check']){

}

/* simple commands */

/**
 * run moquette broker server
 * ./gradlew -q start_mqtt_broker
 */
task start_mqtt_broker(type: JavaExec, dependsOn: classes) {
    description = 'This task will start mqtt broker server'
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.iotlabs.Runner'
    args "-mqtt", "start_broker"
}

/**
 * register multiple mqtt receivers
 * ./gradlew -q register_receivers -Pf=src/main/resources/config/mqtt_receiver.json
 */
task register_receivers(type: JavaExec, dependsOn: classes) {
    description = 'This task will register all receivers in preference file.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.iotlabs.Runner'
    if (project.hasProperty("f") ) {
        args "-mqtt", "register_receivers", "-f", f
    }
}

/**
 * run sparkjava web server
 * ./gradlew -q run_webserver
 */
task run_webserver(type: JavaExec, dependsOn: classes) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.iotlabs.Runner'
    args "-server"
}